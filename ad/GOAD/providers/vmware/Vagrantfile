Vagrant.configure("2") do |config|

ENV['VAGRANT_DEFAULT_PROVIDER'] = 'vmware_desktop'

boxes = [
  # windows server 2022 : don't work for now
  #{ :name => "DC01",  :ip => "192.168.56.10", :box => "StefanScherer/windows_2022", :box_version => "2021.08.23", :os => "windows"},
  # windows server 2019
  { :name => "GOAD-DC01",  :ip => "192.168.56.10", :box => "StefanScherer/windows_2019", :box_version => "2021.05.15", :os => "windows"},
  # windows server 2019
  { :name => "GOAD-DC02",  :ip => "192.168.56.11", :box => "StefanScherer/windows_2019", :box_version => "2021.05.15", :os => "windows"},
  # windows server 2016
  { :name => "GOAD-DC03",  :ip => "192.168.56.12", :box => "StefanScherer/windows_2016", :box_version => "2017.12.14", :os => "windows"},
  # windows server 2019
  #{ :name => "SRV01", :ip => "192.168.56.21", :box => "StefanScherer/windows_2019", :box_version => "2020.07.17", :os => "windows"},
  # windows server 2019
  { :name => "GOAD-SRV02", :ip => "192.168.56.22", :box => "StefanScherer/windows_2019", :box_version => "2020.07.17", :os => "windows"},
  # windows server 2016
  { :name => "GOAD-SRV03", :ip => "192.168.56.23", :box => "StefanScherer/windows_2016", :box_version => "2019.02.14", :os => "windows"},
  # ANSIBLE AND MAKE WAZUH GREAT AGAIN
 { :name => "GOAD-ANSIBLE", :ip => "192.168.56.50", :box => "bento/ubuntu-22.04", :os => "linux", :forwarded_port => [ {:guest => 22, :host => 2210, :id => "ssh"} ] }

]

  config.vm.provider "virtualbox" do |v|
    v.memory = 4000
    v.cpus = 2
  end

  config.vm.provider "vmware_desktop" do |v|
    v.vmx["memsize"] = "4000"
    v.vmx["numvcpus"] = "2"
    # v.force_vmware_license = "workstation"  # force the licence for fix some vagrant plugin issue
  end
  
  # make the vms appear in the GUI of vmware workstation
  config.vm.provider "vmware_desktop" do |v|
  v.gui = true
  end

  # disable rdp forwarded port inherited from StefanScherer box
  config.vm.network :forwarded_port, guest: 3389, host: 3389, id: "rdp", auto_correct: true, disabled: true

  # no autoupdate if vagrant-vbguest is installed
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.vm.boot_timeout = 600
  config.vm.graceful_halt_timeout = 600
  config.winrm.retry_limit = 30
  config.winrm.retry_delay = 10
  


  boxes.each do |box|
    config.vm.define box[:name] do |target|
      # BOX
      target.vm.provider "virtualbox" do |v|
        v.name = box[:name]
        v.customize ["modifyvm", :id, "--groups", "/GOAD"]
      end
      target.vm.box_download_insecure = box[:box]
      target.vm.box = box[:box]
      if box.has_key?(:box_version)
        target.vm.box_version = box[:box_version]
      end

      # issues/49
      target.vm.synced_folder '.', '/vagrant', disabled: true

      # IP
      target.vm.network :private_network, ip: box[:ip]      

      # OS specific
      if box[:os] == "windows"
        target.vm.guest = :windows
        target.vm.communicator = "winrm"
        target.vm.provision :shell, :path => "../../../../vagrant/Install-WMF3Hotfix.ps1", privileged: false
        target.vm.provision :shell, :path => "../../../../vagrant/ConfigureRemotingForAnsible.ps1", privileged: false
		
		# Fix that pesky DNS issue and disable windows firewall before ansible esp for DC02
	    target.vm.provision "shell", inline: "netsh advfirewall set allprofiles state off", privileged: true

        # fix ip for vmware
        if ENV['VAGRANT_DEFAULT_PROVIDER'] == "vmware_desktop"
          target.vm.provision :shell, :path => "../../../../vagrant/fix_ip.ps1", privileged: false, args: box[:ip]
        end

		# Install Exchange server
		
		#if box[:name] == "GOAD-SRV02"
          #config.vm.provision "file", source: "ExchangeServer2019-x64-CU12.iso", destination: "C:\ExchangeServer2019-x64-CU12.iso"

        #end
		
      else
        target.vm.communicator = "ssh"
		
		# Install Wazuh in the ansible-goad VM
		
		if box[:name] == "elk"
          target.vm.provision "shell", inline: <<-SHELL
            # Install Wazuh manager
            curl -sO https://packages.wazuh.com/4.3/wazuh-install.sh
            sudo bash ./wazuh-install.sh -a -i

            # Start Wazuh manager
            sudo systemctl start wazuh-manager

            # Enable Wazuh manager on boot
            sudo systemctl enable wazuh-manager
          SHELL
        end
		
				# Make Wazuh Great Again Inspired by SOC Fortress and John Hammond
		
		if box[:name] == "elk"
          target.vm.provision "shell", inline: <<-SHELL
            # Install Wazuh manager
            curl -sO https://raw.githubusercontent.com/aaladha/Wazuh-Rules/main/wazuh_socfortress_rules.sh
            sudo bash ./wazuh_socfortress_rules.sh

          SHELL
        end
		
		# Install ansible and deploy the GOAD LAB
		
				if box[:name] == "elk"
          target.vm.provision "shell", inline: <<-SHELL
            
			# Ensure we're root
if [ "$(id -u)" != "0" ]; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

# Add repositories
add-apt-repository -y multiverse

# Get list of latest packages
apt-get update

# Make sure we're running on latest versions of things installed
apt-get -y autoupdate

#Install Python PIP
apt-get install git -y
sudo apt install python3-pip -y
pip3 --version


# Download GOAD
git clone https://github.com/aaladha/GOAD-Windows /opt/goad


# Set up prerequisites
pip install --upgrade pip && pip install ansible-core==2.12.6 && pip install pywinrm

# Install stuff needed for Ansible
ansible-galaxy install -r /opt/goad/ansible/requirements.yml

# Launch provisioning with Ansible
export ANSIBLE_COMMAND="ansible-playbook -i /opt/goad/ad/GOAD/data/inventory -i /opt/goad/ad/GOAD/providers/vmware/inventory"

cd /opt/goad/ansible && /opt/goad/scripts/provisionning.sh
			
          SHELL
        end
		
      end

      if box.has_key?(:forwarded_port)
        # forwarded port explicit
        box[:forwarded_port] do |forwarded_port|
          target.vm.network :forwarded_port, guest: forwarded_port[:guest], host: forwarded_port[:host], host_ip: "127.0.0.1", id: forwarded_port[:id]
        end
      end

    end
  end
end
